#!/usr/bin/python3

import socket
import sys
import argparse
from datetime import datetime

def print_banner():
	print ("********************************************************************")
	print ("*                         SMTP scanner                             *")
	print ("*              Adopted from PWK material by g00fb4ll               *")
	print ("********************************************************************")

def probe_name(s, user):
	# VRFY a user
	s.send('VRFY ' + user + '\r\n')
	result=s.recv(1024)
	print (result)
	return

def connect_and_send_payload(target):
	print ('Trying {}'.format(target))
	
	# Create a Socket
	try:
		s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.setdefaulttimeout(2)
	except:
		print("Can't create socket...")
		return

	# Connect to the Server
	try:
		connect=s.connect((target, 25))
	except:
		print ("Connect to {} failed...".format(target))
		s.close()
		return
	
	# Receive the banner
	try:
		banner=s.recv(1024)
		print (banner)
			
		if args.userlist is None:
			probe_name(s, args.username)
		else:
			# Here we assume successfull file parsing
			for user in userlist:
				probe_name(s, user)
	except:
		print ('Send or receive from {} failed...'.format(target))
		s.close()
		return
	
	# Close the socket
	s.close()

print_banner()

# Argument parsing
parser = argparse.ArgumentParser(description='Script that scans targets for smtp user names.')
group1 = parser.add_mutually_exclusive_group()
group2 = parser.add_mutually_exclusive_group()
group1.add_argument("-u", "--username", help="username to test existance")
group1.add_argument("-U", "--userlist", help="path to userlist file")
group2.add_argument("-t", "--target", help="ip/domain name of the target")
group2.add_argument("-T", "--targetlist", help="path to targetlist file")
args = parser.parse_args()

# Reading files into arrays
if args.targetlist is not None:
	try:
		with open(args.targetlist, 'r') as targetsfile:
    			targetlist = targetsfile.readlines()
	except:
		print ("Can't open targetlist file ", args.targetlist)
		sys.exit(0)
	#print targetlist

if args.userlist is not None:
	try:
		with open(args.userlist, 'r') as usersfile:
			userlist = usersfile.readlines()
	except:
		print ("Can't open userlist file ", args.userlist)
		sys.exit(0)
	#print userlist

print ("Time started: " + str(datetime.now()))
if args.targetlist is None:
	connect_and_send_payload(socket.gethostbyname(args.target))
else:
	# Here we assume successfull file parsing
	for target in targetlist:
		connect_and_send_payload(socket.gethostbyname(target))
	
